server {

    listen 9090;

    location /t {
        access_by_lua_block {

            local ratelimit = require "resty.redis.ratelimit"
            local red = { host = "127.0.0.1", port = 6379, timeout = 1 }
            local lim, err = ratelimit.new("one", "2r/m", "ratelimit_circuit_breaker", red)
            if not lim then
                ngx.log(ngx.ERR,
                        "failed to instantiate a resty.redis.ratelimit object: ", err)
                return ngx.exit(500)
            end

            -- NOTICE: the following call must be per-request.

            -- local redis = require "resty.redis"
            -- local red = redis:new()

            -- red:set_timeout(1000)

            -- local ok, err = red:connect("127.0.0.1", 6379)
            -- if not ok then
            --     ngx.log(ngx.ERR, "failed to connect redis: ", err)
            --     return ngx.exit(500)
            -- end


            local key = ngx.var.binary_remote_addr
            local delay, err = lim:is_rate_limited(key, ngx.req.start_time())
            ngx.log(ngx.CRIT,delay)

            if delay then
                return ngx.exit(429)
            end
            --if not delay then
            --    if err == "rejected" then
            --        return ngx.exit(503)
            --    end
            --    ngx.log(ngx.ERR, "failed to limit req: ", err)
            --    return ngx.exit(500)
            --end

            --if delay >= 0.001 then
                -- the 2nd return value holds the number of excess requests
                -- per second for the specified key.
            --    local excess = err

            --    ngx.sleep(delay)
            --end
        }

content_by_lua_block {
             ngx.say('Hello,world!')
         }
    }

}
